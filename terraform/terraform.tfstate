{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 370,
  "lineage": "4b9c8385-821b-5591-b98d-2d64bccb7b53",
  "outputs": {
    "namespaces": {
      "value": [
        "argocd",
        "internal-staging",
        "internal-prod",
        "external-staging",
        "external-prod"
      ],
      "type": [
        "tuple",
        [
          "string",
          "string",
          "string",
          "string",
          "string"
        ]
      ]
    },
    "next_steps": {
      "value": "ArgoCD has been installed successfully!\n    \nNext steps:\n1. Wait for ArgoCD to be ready: kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd\n2. Deploy applications: kubectl apply -n argocd -f ../argocd/apps/\n3. Get service URLs: make urls\n4. Get ArgoCD login: make argocd-login\n    \nNamespaces created:\n- argocd (ArgoCD control plane)\n- internal-staging, internal-prod (internal services)\n- external-staging, external-prod (external services)\n",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.8.4",
                "chart": "argo-cd",
                "first_deployed": 1755464708,
                "last_deployed": 1755464708,
                "name": "argocd",
                "namespace": "argocd",
                "notes": "\nDEPRECATED option server.extraArgs.\"--insecure\" - Use configs.params.server.insecure\n\nIn order to access the server UI you have the following options:\n\n1. kubectl port-forward service/argocd-server -n argocd 8080:443\n\n    and then open the browser on http://localhost:8080 and accept the certificate\n\n2. enable ingress in the values file `server.ingress.enabled` and either\n      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough\n      - Set the `configs.params.\"server.insecure\"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts\n\n\nAfter reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:\n\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n\n(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)\n",
                "revision": 1,
                "values": "{\"applicationSet\":{\"enabled\":true},\"configs\":{\"params\":{\"server.disable.auth\":true,\"server.insecure\":true},\"rbac\":{\"policy.default\":\"role:admin\"},\"repositories\":{\"cicd-demo-local\":{\"password\":\"admin12345\",\"type\":\"git\",\"url\":\"http://gitea-http.dev-tools.svc.cluster.local:3000/admin/cicd-demo-local.git\",\"username\":\"admin\"}}},\"controller\":{\"resources\":{\"limits\":{\"cpu\":\"1000m\",\"memory\":\"1Gi\"},\"requests\":{\"cpu\":\"250m\",\"memory\":\"256Mi\"}}},\"global\":{\"logging\":{\"level\":\"info\"}},\"notifications\":{\"enabled\":false},\"repoServer\":{\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}}},\"server\":{\"extraArgs\":[\"--insecure\"],\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}},\"service\":{\"type\":\"NodePort\"}}}",
                "version": "5.46.7"
              }
            ],
            "name": "argocd",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "# ArgoCD configuration for NodePort access with no authentication\nconfigs:\n  params:\n    server.insecure: true\n    server.disable.auth: true\n  rbac:\n    policy.default: role:admin\n  repositories:\n    cicd-demo-local:\n      url: http://gitea-http.dev-tools.svc.cluster.local:3000/admin/cicd-demo-local.git\n      username: admin\n      password: admin12345\n      type: git\n\nserver:\n  extraArgs:\n    - --insecure\n  service:\n    type: NodePort\n    # No nodePort field to avoid conflicts - let Kubernetes auto-assign\n  resources:\n    limits:\n      cpu: 500m\n      memory: 512Mi\n    requests:\n      cpu: 100m\n      memory: 128Mi\n\n# Disable internal TLS for NodePort compatibility  \nglobal:\n  logging:\n    level: info\n\n# Resource limits for local development\ncontroller:\n  resources:\n    limits:\n      cpu: 1000m\n      memory: 1Gi\n    requests:\n      cpu: 250m\n      memory: 256Mi\n\nrepoServer:\n  resources:\n    limits:\n      cpu: 500m\n      memory: 512Mi\n    requests:\n      cpu: 100m\n      memory: 128Mi\n\n# Enable application set controller\napplicationSet:\n  enabled: true\n\n# Notifications controller (optional)\nnotifications:\n  enabled: false\n"
            ],
            "verify": false,
            "version": "5.46.7",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.argocd"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "gitea",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "gitea",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "gitea",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.24.3",
                "chart": "gitea",
                "first_deployed": 1755464708,
                "last_deployed": 1755464708,
                "name": "gitea",
                "namespace": "dev-tools",
                "notes": "CHART NAME: valkey-cluster\nCHART VERSION: 3.0.18\nAPP VERSION: 8.1.3\n\nDid you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.** Please be patient while the chart is being deployed **\n\n\n\nYou have deployed a Valkey Cluster accessible only from within you Kubernetes Cluster.INFO: The Job to create the cluster will be created.To connect to your Valkey cluster:\n\n1. Run a Valkey pod that you can use as a client:\nkubectl run --namespace dev-tools gitea-valkey-cluster-client --rm --tty -i --restart='Never' \\\n\n--image docker.io/bitnami/valkey-cluster:8.1.3-debian-12-r1 -- bash\n\n2. Connect using the Valkey CLI:\n\nvalkey-cli -c -h gitea-valkey-cluster\n\n\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - valkey.resources\n  - updateJob.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\nCHART NAME: postgresql-ha\nCHART VERSION: 16.0.22\nAPP VERSION: 17.5.0\n\nDid you know there are enterprise versions of the Bitnami catalog? For enhanced secure software supply chain features, unlimited pulls from Docker, LTS support, or application customization, see Bitnami Premium or Tanzu Application Catalog. See https://www.arrow.com/globalecs/na/vendors/bitnami for more information.\n\n** Please be patient while the chart is being deployed **\nPostgreSQL can be accessed through Pgpool-II via port 5432 on the following DNS name from within your cluster:\n\n    gitea-postgresql-ha-pgpool.dev-tools.svc.cluster.local\n\nPgpool-II acts as a load balancer for PostgreSQL and forward read/write connections to the primary node while read-only connections are forwarded to standby nodes.\n\nTo get the password for \"gitea\" user run:\n\n    export PASSWORD=$(kubectl get secret --namespace \"dev-tools\" gitea-postgresql-ha-postgresql -o jsonpath=\"{.data.password}\" | base64 -d)\n\nTo connect to your database run the following command:\n\n    kubectl run gitea-postgresql-ha-client --rm --tty -i --restart='Never' --namespace dev-tools \\\n        --image docker.io/bitnami/postgresql-repmgr:17.5.0-debian-12-r16 --env=\"PGPASSWORD=$PASSWORD\"  \\\n        --command -- psql -h gitea-postgresql-ha-pgpool -p 5432 -U gitea -d gitea\n\nTo connect to your database from outside the cluster execute the following commands:\n\n    kubectl port-forward --namespace dev-tools svc/gitea-postgresql-ha-pgpool 5432:5432 \u0026\n    psql -h 127.0.0.1 -p 5432 -U gitea -d gitea\n\nWARNING: There are \"resources\" sections in the chart not set. Using \"resourcesPreset\" is not recommended for production. For production installations, please set the following values according to your workload needs:\n  - postgresql.resources\n  - pgpool.resources\n+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n\n1. Get the application URL by running these commands:\n  export NODE_PORT=$(kubectl get --namespace dev-tools -o jsonpath=\"{.spec.ports[0].nodePort}\" services gitea)\n  export NODE_IP=$(kubectl get nodes --namespace dev-tools -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n",
                "revision": 1,
                "values": "{\"gitea\":{\"admin\":{\"email\":\"admin@example.com\",\"password\":\"admin12345\",\"username\":\"admin\"}},\"ingress\":{\"enabled\":false},\"persistence\":{\"enabled\":false},\"postgresql\":{\"enabled\":false},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"512Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}},\"service\":{\"http\":{\"type\":\"NodePort\"},\"ssh\":{\"enabled\":false}}}",
                "version": "12.1.3"
              }
            ],
            "name": "gitea",
            "namespace": "dev-tools",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://dl.gitea.io/charts/",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "upgrade_install": null,
            "values": [
              "gitea:\n  admin:\n    username: admin\n    password: admin12345\n    email: admin@example.com\n\nservice:\n  http:\n    type: NodePort  # let K8s auto-assign; avoids conflicts\n  ssh:\n    enabled: false\n\npersistence:\n  enabled: false     # purely local demo; ephemeral\n\npostgresql:\n  enabled: false     # use built-in sqlite for simplicity\n\ningress:\n  enabled: false\n\n# Resource limits for local development\nresources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n"
            ],
            "verify": false,
            "version": "12.1.3",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_namespace.dev_tools"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "argocd",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app.kubernetes.io/component": "argocd"
                },
                "name": "argocd",
                "resource_version": "48577",
                "uid": "9c211420-6138-47ef-9512-e8090135b279"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "dev_tools",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "dev-tools",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app.kubernetes.io/component": "dev-tools"
                },
                "name": "dev-tools",
                "resource_version": "48578",
                "uid": "833bbc2a-22e1-4256-b1d8-7b30f75cf45c"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "external_prod",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "external-prod",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "environment": "production",
                  "tier": "external"
                },
                "name": "external-prod",
                "resource_version": "48579",
                "uid": "b9b287bc-6a8e-4543-97c7-767cdba24080"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "external_staging",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "external-staging",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "environment": "staging",
                  "tier": "external"
                },
                "name": "external-staging",
                "resource_version": "48574",
                "uid": "d1777f83-dac4-4e9d-8742-be7a69596154"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "internal_prod",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "internal-prod",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "environment": "production",
                  "tier": "internal"
                },
                "name": "internal-prod",
                "resource_version": "48576",
                "uid": "eb141204-f4be-4a6b-95a3-3f15a73ab01b"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "internal_staging",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "internal-staging",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "environment": "staging",
                  "tier": "internal"
                },
                "name": "internal-staging",
                "resource_version": "48575",
                "uid": "6075b9a6-589d-45b7-805c-b53ac55511e2"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    }
  ],
  "check_results": null
}
